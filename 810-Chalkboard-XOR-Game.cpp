class Solution {
public:
    // 0 xor x = x，因此若开局xor值为x != 0，且为偶数个，那么数组中至少存在一个不为x的数值，
    // 因为如果所有数值都是x，那么偶数个相同数的xor为0，矛盾。因此对于此种开局，先手只需要移除一个
    // 不为x的数值，即可保证移除后的数组xor仍然不为0。此时对于后手，有2种情况:
    // 1. 移除某个数后，数组的xor值变为0，输掉
    // 2. 移除某个数后，数组的xor值不变为0，但是此时局面又回到了xor值不为0且有偶数个的情况。
    // 综合1，2可知此种情况下先手必赢。
    // 反之，若开局为xor值不为0且为奇数个，由上述1，2的结论可知先手必定输掉。
    bool xorGame(vector<int>& nums) {
        int x = 0;
        int n = nums.size();
        for (int num : nums) {
            x ^= num;
        }
        return x == 0 || n % 2 == 0;
    }
};